xaringan::inf_mr(cast_from = "..")
xaringan::inf_mr(cast_from = "..")
xaringan::inf_mr(cast_from = "..")
xaringan::inf_mr(cast_from = "..")
1-(0.95)^20
1-(0.95)^25
1-(0.95)^23
xaringan::inf_mr(cast_from = "..")
install.packages('wooldridge')
library(wooldridge)
salary
data(salary)
data("wage1")
view(wage1)
view(wage1)
wage1
plot(1:10)
plot(1:10)
x = rnorm(100)
plot(x)
mean(x)
2+2
plot(1:10)
plot(1:10)
wage1
?wage1
library(wooldridge) # run for each new R session
?wage1
a = 2
a
b = 5
b
a*b
?rnorm
x = rnorm(100)
x
plot(x)
mean(x)
summary(x)
wage1$exper
mean(wage1$exper)
hist(x)
hist(wage1$exper)
test <- function(a,b){
c = a+b
}
test <- function(a,b){
c = a+b
print c
# example of a function
test <- function(a,b){
c = a+b
c
}
test(a =2, b =5)
test2 <- function(a,b){
c = a+b
d = c * log(10)
d
}
test(2, 5)
test2(2, 5)
xaringan::inf_mr(cast_from = "..")
?lm
xaringan::inf_mr(cast_from = "..")
xaringan::inf_mr(cast_from = "..")
xaringan::inf_mr(cast_from = "..")
xaringan::inf_mr(cast_from = "..")
bechdel90_13 <- bechdel %>%
filter(between(year, 1990, 2013))
library(fivethirtyeight)
library(tidyverse)
bechdel90_13 <- bechdel %>%
filter(between(year, 1990, 2013))
?filter
dim(bechdel90_13)
tail(bechdel90_13)
bechdel90_13 %>%
group_by(binary) %>%
summarise(
med_budget = median(budget_2013),
med_domgross = median(domgross_2013, na.rm = TRUE),
med_intgross = median(intgross_2013, na.rm = TRUE)
)
View(bechdel90_13)
View(bechdel90_13)
bechdel90_13 %>%
group_by(clean_test) %>%
summarise(
med_budget = median(budget_2013),
med_domgross = median(domgross_2013, na.rm = TRUE),
med_intgross = median(intgross_2013, na.rm = TRUE)
)
bechdel90_13 <- bechdel90_13 %>%
mutate(roi = (intgross_2013 + domgross_2013) / budget_2013)
View(bechdel90_13)
View(bechdel90_13)
bechdel90_13 %>%
arrange(desc(roi)) %>%
select(title, roi, year)
ggplot(data = bechdel90_13,
mapping = aes(x = clean_test, y = roi, color = binary)) +
geom_boxplot() +
labs(
title = "Return on investment vs. Bechdel test result",
x = "Detailed Bechdel result",
y = "___",
color = "Binary Bechdel result"
)
ggplot(data = bechdel90_13,
mapping = aes(x = clean_test, y = roi, color = binary)) +
geom_boxplot() +
labs(
title = "Return on investment vs. Bechdel test result",
x = "Detailed Bechdel result",
y = "roi",
color = "Binary Bechdel result"
)
bechdel90_13 %>%
filter(roi > 400) %>%
select(title, budget_2013, domgross_2013, year)
bechdel90_13 %>%
filter(roi > 200) %>%
select(title, budget_2013, domgross_2013, year)
bechdel90_13 %>%
filter(roi > 400) %>%
select(title, budget_2013, domgross_2013, year)
bechdel90_13 %>%
filter(roi > 200) %>%
select(title, budget_2013, domgross_2013, year)
ggplot(data = bechdel90_13, mapping = aes(x = clean_test, y = roi, color = binary)) +
geom_boxplot() +
labs(
title = "Return on investment vs. Bechdel test result",
subtitle = "roi>400", # Something about zooming in to a certain level
x = "Detailed Bechdel result",
y = "Return on investment",
color = "Binary Bechdel result"
) +
coord_cartesian(ylim = c(0, 15))
library(tidyverse)
library(datasauRus)
datasaurus_dozen
datasaurus_dozen %>%
count(dataset) %>%
print(13)
?datasaurus_dozen
xaringan::inf_mr(cast_from = "..")
xaringan::inf_mr(cast_from = "..")
xaringan::inf_mr(cast_from = "..")
xaringan::inf_mr(cast_from = "..")
xaringan::inf_mr(cast_from = "..")
xaringan::inf_mr(cast_from = "..")
xaringan::inf_mr(cast_from = "..")
xaringan::inf_mr(cast_from = "..")
xaringan::inf_mr(cast_from = "..")
install.packages("dsbox")
?dsbox
??dsbox
??dsbox
install.packages("dsbox")
xaringan::inf_mr(cast_from = "..")
xaringan::inf_mr(cast_from = "..")
setwd("~/Dropbox/ts/uni_konstanz/2023-/teaching/Tidyverse/course-material/lab/lab-01")
xaringan::inf_mr(cast_from = "..")
xaringan::inf_mr(cast_from = "..")
setwd("~/Dropbox/ts/uni_konstanz/2023-/teaching/Tidyverse/course-material/lectures/02-data-viz-ggplot")
xaringan::inf_mr(cast_from = "..")
xaringan::inf_mr(cast_from = "..")
xaringan::inf_mr(cast_from = "..")
xaringan::inf_mr(cast_from = "..")
xaringan::inf_mr(cast_from = "..")
xaringan::inf_mr(cast_from = "..")
xaringan::inf_mr(cast_from = "..")
xaringan::inf_mr(cast_from = "..")
xaringan::inf_mr(cast_from = "..")
xaringan::inf_mr(cast_from = "..")
xaringan::inf_mr(cast_from = "..")
# Palmer penguins
library(palmer)
# Palmer penguins
library(palmerpenguins)
ggplot(data = penguins,
mapping = aes(x = bill_depth_mm,
y = bill_length_mm,
colour = species)) +
geom_point() +
labs(title = "Bill depth and length")
ggplot(data = penguins,
mapping = aes(x = bill_depth_mm,
y = bill_length_mm,
colour = species)) +
geom_point() +
labs(title = "Bill depth and length",
subtitle = "Dimensions for Adelie, Chinstrap, and Gentoo Penguins",
x = "Bill depth (mm)", y = "Bill length (mm)",
colour = "Species")
ggplot(data = penguins,
mapping = aes(x = bill_depth_mm,
y = bill_length_mm,
colour = species)) +
geom_point() +
labs(title = "Bill depth and length",
subtitle = "Dimensions for Adelie, Chinstrap, and Gentoo Penguins",
x = "Bill depth (mm)", y = "Bill length (mm)",
colour = "Species",
caption = "Source: Palmer Station LTER / palmerpenguins package")
ggplot(data = penguins,
mapping = aes(x = bill_depth_mm,
y = bill_length_mm,
colour = species)) +
geom_point() +
labs(title = "Bill depth and length",
subtitle = "Dimensions for Adelie, Chinstrap, and Gentoo Penguins",
x = "Bill depth (mm)", y = "Bill length (mm)",
colour = "Species",
caption = "Source: Palmer Station LTER / palmerpenguins package") +
scale_colour_viridis_d()
ggplot(data = penguins,
mapping = aes(x = bill_depth_mm,
y = bill_length_mm,
colour = species)) +
geom_point() +
scale_colour_viridis_d()
ggplot(penguins,
aes(x = bill_depth_mm,
y = bill_length_mm,
colour = species)) + #<<
geom_point() +
scale_colour_viridis_d()
ggplot(penguins,
aes(x = bill_depth_mm,
y = bill_length_mm,
colour = species,
shape = island)) + #<<
geom_point() +
scale_colour_viridis_d()
ggplot(penguins,
aes(x = bill_depth_mm,
y = bill_length_mm,
colour = species,
shape = species)) +
geom_point() +
scale_colour_viridis_d()
ggplot(penguins,
aes(x = bill_depth_mm,
y = bill_length_mm,
colour = species,
shape = species)) +
geom_point() +
scale_colour_viridis_d()
ggplot(penguins,
aes(x = bill_depth_mm,
y = bill_length_mm,
colour = species,
shape = species,
size = body_mass_g)) +
geom_point() +
scale_colour_viridis_d()
ggplot(penguins,
aes(x = bill_depth_mm,
y = bill_length_mm,
colour = species,
shape = species,
size = body_mass_g,
alpha = flipper_length_mm)) + #<<
geom_point() +
scale_colour_viridis_d()
ggplot(penguins,
aes(x = bill_depth_mm,
y = bill_length_mm,
size = body_mass_g,
alpha = flipper_length_mm)) +
geom_point()
ggplot(penguins,
aes(x = bill_depth_mm,
y = bill_length_mm)) +
geom_point(size = 2, alpha = 0.5)
# faceting
ggplot(penguins, aes(x = bill_depth_mm, y = bill_length_mm)) +
geom_point() +
facet_grid(species ~ island)
ggplot(penguins, aes(x = bill_depth_mm, y = bill_length_mm)) +
geom_point() +
facet_grid(species ~ sex)
ggplot(penguins, aes(x = bill_depth_mm, y = bill_length_mm)) +
geom_point() +
facet_grid(sex ~ species)
ggplot(penguins, aes(x = bill_depth_mm, y = bill_length_mm)) +
geom_point() +
facet_wrap(~ species)
ggplot(penguins, aes(x = bill_depth_mm, y = bill_length_mm)) +
geom_point() +
facet_grid(. ~ species)
ggplot(penguins, aes(x = bill_depth_mm, y = bill_length_mm)) +
geom_point() +
facet_grid(. ~ species)
ggplot(penguins, aes(x = bill_depth_mm, y = bill_length_mm)) +
geom_point() +
facet_wrap(~ species, ncol = 2)
ggplot(
penguins,
aes(x = bill_depth_mm,
y = bill_length_mm,
color = species)) +
geom_point() +
facet_grid(species ~ sex) +
scale_color_viridis_d()
ggplot(
penguins,
aes(x = bill_depth_mm,
y = bill_length_mm,
color = species)) +
geom_point() +
facet_grid(species ~ sex) +
scale_color_viridis_d() +
guides(color = "none")
xaringan::inf_mr(cast_from = "..")
xaringan::inf_mr(cast_from = "..")
xaringan::inf_mr(cast_from = "..")
xaringan::inf_mr(cast_from = "..")
View(hook_output)
if (simulate.p.value) {
setMETH()
nx <- length(x)
sm <- matrix(sample.int(nx, B * n, TRUE, prob = p),
nrow = n)
ss <- apply(sm, 2L, function(x, E, k) {
sum((table(factor(x, levels = 1L:k)) - E)^2/E)
}, E = E, k = nx)
PARAMETER <- NA
PVAL <- (1 + sum(ss >= almost.1 * STATISTIC))/(B + 1)
}
runif(40, min = -1, max = 1)
runif(300, min = 0, max = 1)
runif(300, min = 0, max = 1)
rand_unif <- runif(300, min = 0, max = 1)
hist(rand_unif, freq = FALSE, xlab = "x", density = 20, col = "darkgray")
hist(rand_unif, freq = FALSE, xlab = "p value",  ylab = "prop",
title = "p-values from tests comparing those born on odd and even day",
density = 20, col = "darkgray")
hist(rand_unif, freq = FALSE, xlab = "p value",  ylab = "prop",
main = "p-values from tests comparing those born on odd and even day",
density = 20, col = "darkgray")
hist(rand_unif, freq = FALSE, xlab = "p value",  ylab = "prop",
main = "p-values from tests: odd bv even birthday",
density = 20, col = "darkgray")
runif(300, min = 0, max = 1)
rand_unif <- runif(300, min = 0, max = 1)
hist(rand_unif, freq = FALSE, xlab = "p value",  ylab = "prop",
main = "p-values from tests: odd vs. even birthday",
density = 20, col = "darkgray")
rand_unif <- runif(300, min = 0, max = 1)
hist(rand_unif, freq = FALSE, xlab = "p value",  ylab = "prop",
main = "p-values from tests: odd vs. even birthday",
density = 20, col = "darkgray")
rand_unif <- runif(100, min = 0, max = 1)
hist(rand_unif, freq = FALSE, xlab = "p value",  ylab = "prop",
main = "p-values from tests: odd vs. even birthday",
density = 20, col = "darkgray")
rand_unif <- runif(100, min = 0.1, max = 1)
hist(rand_unif, freq = FALSE, xlab = "p value",  ylab = "prop",
main = "p-values from tests: odd vs. even birthday",
density = 20, col = "darkgray")
rand_unif <- runif(1000, min = 0, max = 1)
hist(rand_unif, freq = FALSE, xlab = "p value",  ylab = "prop",
main = "p-values from tests: odd vs. even birthday",
density = 20, col = "darkgray")
rand_unif <- runif(25, min = 0, max = 1)
hist(rand_unif, freq = FALSE, xlab = "p value",  ylab = "prop",
main = "p-values from tests: odd vs. even birthday",
density = 20, col = "darkgray")
hist(rand_unif, freq = FALSE, xlab = "p value",  ylab = "prop",
main = "p-values from tests: odd vs. even birthday",
density = 20, col = "darkgray")
rand_unif <- runif(25, min = 0, max = 1)
hist(rand_unif, freq = FALSE, xlab = "p value",  ylab = "prop",
main = "p-values from tests: odd vs. even birthday",
density = 20, col = "darkgray")
hist(rand_unif, freq = TRUE, xlab = "p value",  ylab = "prop",
main = "p-values from tests: odd vs. even birthday",
density = 20, col = "darkgray")
?hist
hist(rand_unif, freq = TRUE, xlab = "p value",  ylab = "prop",
xlim = range(10),
main = "p-values from tests: odd vs. even birthday",
density = 20, col = "darkgray")
hist(rand_unif, freq = TRUE, xlab = "p value",  ylab = "prop",
xlim = range(1),
main = "p-values from tests: odd vs. even birthday",
density = 20, col = "darkgray")
hist(rand_unif, freq = TRUE, xlab = "p value",  ylab = "prop",
xlim = range(7),
main = "p-values from tests: odd vs. even birthday",
density = 20, col = "darkgray")
hist(rand_unif, freq = TRUE, xlab = "p value",  ylab = "prop",
xlim = range(0.01),
main = "p-values from tests: odd vs. even birthday",
density = 20, col = "darkgray")
hist(rand_unif, freq = TRUE, xlab = "p value",  ylab = "prop",
xlim = range(0.1),
main = "p-values from tests: odd vs. even birthday",
density = 20, col = "darkgray")
hist(rand_unif, freq = TRUE, xlab = "p value",  ylab = "prop",
xlim = range(0.5),
main = "p-values from tests: odd vs. even birthday",
density = 20, col = "darkgray")
hist(rand_unif, freq = TRUE, xlab = "p value",  ylab = "prop",
xlim = xlim = c(0,1),
hist(rand_unif, freq = TRUE, xlab = "p value",  ylab = "prop",
xlim = xlim = c(0,1),
hist(rand_unif, freq = TRUE, xlab = "p value",  ylab = "prop",
xlim = c(0,1),
main = "p-values from tests: odd vs. even birthday",
density = 20, col = "darkgray")
hist(rand_unif, freq = TRUE, xlab = "p value",  ylab = "prop",
xlim = c(0,1), breaks = 10,
main = "p-values from tests: odd vs. even birthday",
density = 20, col = "darkgray")
hist(rand_unif, freq = TRUE, xlab = "p value",  ylab = "prop",
xlim = c(0,1), breaks = 15,
main = "p-values from tests: odd vs. even birthday",
density = 20, col = "darkgray")
hist(rand_unif, freq = TRUE, xlab = "p value",  ylab = "prop",
xlim = c(0,1), breaks = 5,
main = "p-values from tests: odd vs. even birthday",
density = 20, col = "darkgray")
hist(rand_unif, freq = TRUE, xlab = "p value",  ylab = "prop",
xlim = c(0,1), breaks = 7,
main = "p-values from tests: odd vs. even birthday",
density = 20, col = "darkgray")
hist(rand_unif, freq = TRUE, xlab = "p value",  ylab = "prop",
xlim = c(0,1), breaks = 10,
main = "p-values from tests: odd vs. even birthday",
density = 20, col = "darkgray")
rand_unif <- runif(25, min = 0, max = 1)
hist(rand_unif, freq = TRUE, xlab = "p value",  ylab = "prop",
xlim = c(0,1), breaks = 10,
main = "p-values from tests: odd vs. even birthday",
density = 20, col = "darkgray")
rand_unif <- runif(25, min = 0, max = 1)
hist(rand_unif, freq = TRUE, xlab = "p value",  ylab = "prop",
xlim = c(0,1), breaks = 10,
main = "p-values from tests: odd vs. even birthday",
density = 20, col = "darkgray")
rand_unif <- runif(25, min = 0, max = 1)
hist(rand_unif, freq = TRUE, xlab = "p value",  ylab = "prop",
xlim = c(0,1), breaks = 10,
main = "p-values from tests: odd vs. even birthday",
density = 20, col = "darkgray")
rand_unif
rand_unif <- runif(25, min = 0, max = 1)
rand_unif
hist(rand_unif, freq = TRUE, xlab = "p value",  ylab = "prop",
xlim = c(0,1), breaks = 10,
main = "p-values from tests: odd vs. even birthday",
density = 20, col = "darkgray")
rand_unif <- runif(25, min = 0, max = 1)
hist(rand_unif, freq = TRUE, xlab = "p value",  ylab = "prop",
xlim = c(0,1), breaks = 10,
main = "p-values from tests: odd vs. even birthday",
density = 20, col = "darkgray")
hist(rand_unif, freq = TRUE, xlab = "p value",  ylab = "prop",
xlim = c(0,1), breaks = 10,
main = "p-values from tests: odd vs. even birthday",
density = 20, col = "darkgray")
rand_unif
hist(rand_unif, freq = TRUE, xlab = "p value",  ylab = "prop",
xlim = c(0,1), breaks = 20,
main = "p-values from tests: odd vs. even birthday",
density = 20, col = "darkgray")
hist(rand_unif, freq = TRUE, xlab = "p value",  ylab = "prop",
xlim = c(0,1), breaks = 40,
main = "p-values from tests: odd vs. even birthday",
density = 20, col = "darkgray")
hist(rand_unif, freq = TRUE, xlab = "p value",  ylab = "prop",
xlim = c(0,1), breaks = 20,
main = "p-values from tests: odd vs. even birthday",
density = 20, col = "darkgray")
hist(rand_unif, freq = TRUE, xlab = "p value",  ylab = "prop",
xlim = c(0,1), breaks = 20, labels=seq(0,1,0.05))
hist(rand_unif, freq = TRUE, xlab = "p value",  ylab = "prop",
xlim = c(0,1), breaks = 20, labels=seq(0,1,0.05)),
hist(rand_unif, freq = TRUE, xlab = "p value",  ylab = "prop",
xlim = c(0,1), breaks = 20,
main = "p-values from tests: odd vs. even birthday",
density = 20, col = "darkgray")
rand_unif <- runif(25, min = 0, max = 1)
hist(rand_unif, freq = TRUE, xlab = "p value",  ylab = "prop",
xlim = c(0,1), breaks = 20,
main = "p-values from tests: odd vs. even birthday",
density = 20, col = "darkgray")
rand_unif <- runif(25, min = 0, max = 1)
hist(rand_unif, freq = TRUE, xlab = "p value",  ylab = "prop",
xlim = c(0,1), breaks = 20,
main = "p-values from tests: odd vs. even birthday",
density = 20, col = "darkgray")
rand_unif <- runif(25, min = 0, max = 1)
hist(rand_unif, freq = TRUE, xlab = "p value",  ylab = "prop",
xlim = c(0,1), breaks = 20,
main = "p-values from tests: odd vs. even birthday",
density = 20, col = "darkgray")
rand_unif <- runif(25, min = 0, max = 1)
hist(rand_unif, freq = TRUE, xlab = "p value",  ylab = "prop",
xlim = c(0,1), breaks = 20,
main = "p-values from tests: odd vs. even birthday",
density = 20, col = "darkgray")
hist(rand_unif, freq = TRUE, xlab = "p value",  ylab = "freq,
hist(rand_unif, freq = TRUE, xlab = "p value",  ylab = "freq",
xlim = c(0,1), breaks = 20,
main = "p-values from tests: odd vs. even birthday",
density = 20, col = "darkgray")
